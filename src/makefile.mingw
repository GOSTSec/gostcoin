# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Makefile for the MinGW g++ compiler/toolchain
#
# Assumes Berkeley DB, Boost, and OpenSSL have all been compiled and installed
# into /usr/local (/usr/local/include, /usr/local/lib).
#
# If dependencies are somewhere else, run 'make DEPSDIR=/path/'
#
# Boost libraries are given wacky names that include the particular version of
# boost you're using; set BOOST_SUFFIX appropriately.
#
# 'make clean' assumes it is running inside a MSYS shell, and uses 'rm'
# to remove files.

CXX ?= g++

USE_IPV6:=1
USE_DEBUG:=0

DEPSDIR?=/usr/local
WINDRES = windres

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(DEPSDIR)/include" \
 -I"i2psam"

LIBPATHS= \
 -L"$(CURDIR)/leveldb" \
 -L"$(DEPSDIR)/lib"

LIBS= \
 -lleveldb \
 -lmemenv \
 $(MINGW_PREFIX)/lib/libboost_filesystem-mt.a \
 $(MINGW_PREFIX)/lib/libboost_program_options-mt.a \
 $(MINGW_PREFIX)/lib/libboost_thread-mt.a \
 $(MINGW_PREFIX)/lib/libboost_chrono-mt.a \
 $(MINGW_PREFIX)/lib/libssl.a \
 $(MINGW_PREFIX)/lib/libcrypto.a \
 $(MINGW_PREFIX)/lib/libdb_cxx.a \
 -lcrypt32

DEFS=-D_MT -DWIN32 -D_WINDOWS -DWIN32_LEAN_AND_MEAN -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DBOOST_ASIO_ENABLE_OLD_SERVICES -DUSE_NATIVE_I2P

ifneq (${USE_DEBUG}, 0)
	DEBUGFLAGS=-g
endif

CFLAGS= -std=c++17 -mthreads -O2 -fPIC -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
# enable: ASLR, DEP and large address aware
LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat -Wl,-Bstatic -Wl,-rpath,/usr/local/lib -L/usr/local/lib -static-libgcc -static-libstdc++

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

ifneq (${USE_IPV6}, -)
    DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

LIBS += -lstdc++ -lmingwthrd -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lwinspool -lwinmm -lshell32 -lcomctl32 -lole32 -loleaut32 -luuid -lrpcrt4 -ladvapi32 -lws2_32 -lmswsock -lshlwapi -lpthread

HEADERS = $(wildcard *.h) $(wildcard i2psam/*.h)

OBJS= \
    leveldb/libleveldb.a \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/keystore.o \
    obj/i2p.o \
    obj/i2psam.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/hash.o \
    obj/bloom.o \
    obj/noui.o \
    obj/leveldb.o \
    obj/txdb.o \
    obj/Gost.o \
    obj/resources.o

all: gostcoind.exe

test check: test_gostcoin.exe FORCE
	test_gostcoin.exe

#
# LevelDB support
#
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)

leveldb/libleveldb.a:
	cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT="$(CFLAGS)" TARGET_OS=NATIVE_WINDOWS libleveldb.a libmemenv.a && cd ..

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO
INCLUDEPATHS += -I"obj"

obj/%.o: %.cpp
	$(CXX) -c $(CFLAGS) -o $@ $<

obj/%.o: i2psam/%.cpp
	$(CXX) -c $(CFLAGS) -o $@ $<

obj/%.o : %.rc
	$(WINDRES) -i $< -o $@

gostcoind.exe: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp
	$(CXX) -c $(TESTDEFS) $(CFLAGS) -o $@ $<

test_gostcoin.exe: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework$(BOOST_SUFFIX) $(LIBS)

clean:
	$(RM) -f gostcoind.exe test_gostcoin.exe
	$(RM) -f obj/*
	$(RM) -f obj-test/*
	cd leveldb && $(MAKE) TARGET_OS=NATIVE_WINDOWS clean && cd ..

FORCE:
